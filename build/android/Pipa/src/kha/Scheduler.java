// Generated by Haxe 3.4.2
package kha;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Scheduler extends haxe.lang.HxObject
{
	static
	{
		//line 42 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.timeWarpSaveTime = 1.0;
		//line 60 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.DIF_COUNT = 3;
		//line 61 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.maxframetime = 0.5;
		//line 65 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.startTime = ((double) (((int) (0.0) )) );
		//line 67 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.activeTimeTask = null;
	}
	
	public Scheduler(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Scheduler()
	{
		//line 37 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.__hx_ctor_kha_Scheduler(this);
	}
	
	
	public static void __hx_ctor_kha_Scheduler(kha.Scheduler __hx_this)
	{
	}
	
	
	public static haxe.root.Array<kha.TimeTask> timeTasks;
	
	public static haxe.root.Array<kha.TimeTask> pausedTimeTasks;
	
	public static haxe.root.Array<kha.TimeTask> outdatedTimeTasks;
	
	public static haxe.root.Array<kha.TimeTask> timeTasksScratchpad;
	
	public static double timeWarpSaveTime;
	
	public static haxe.root.Array<kha.FrameTask> frameTasks;
	
	public static haxe.root.Array<kha.FrameTask> toDeleteFrame;
	
	public static double current;
	
	public static double lastTime;
	
	public static boolean frame_tasks_sorted;
	
	public static boolean stopped;
	
	public static boolean vsync;
	
	public static double onedifhz;
	
	public static int currentFrameTaskId;
	
	public static int currentTimeTaskId;
	
	public static int currentGroupId;
	
	public static int DIF_COUNT;
	
	public static double maxframetime;
	
	public static haxe.root.Array<java.lang.Object> deltas;
	
	public static double startTime;
	
	public static kha.TimeTask activeTimeTask;
	
	public static void init()
	{
		//line 70 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.deltas = new haxe.root.Array<java.lang.Object>();
		//line 71 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		{
			//line 71 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g1 = 0;
			//line 71 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g = kha.Scheduler.DIF_COUNT;
			//line 71 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			while (( _g1 < _g ))
			{
				//line 71 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				int i = _g1++;
				//line 71 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.Scheduler.deltas.__set(i, 0);
			}
			
		}
		
		//line 73 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.stopped = true;
		//line 74 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.frame_tasks_sorted = true;
		//line 75 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.current = kha.Scheduler.lastTime = kha.Scheduler.realTime();
		//line 77 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.currentFrameTaskId = 0;
		//line 78 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.currentTimeTaskId = 0;
		//line 79 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.currentGroupId = 0;
		//line 81 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.timeTasks = new haxe.root.Array<kha.TimeTask>(new kha.TimeTask[]{});
		//line 82 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.pausedTimeTasks = new haxe.root.Array<kha.TimeTask>(new kha.TimeTask[]{});
		//line 83 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.outdatedTimeTasks = new haxe.root.Array<kha.TimeTask>(new kha.TimeTask[]{});
		//line 84 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.timeTasksScratchpad = new haxe.root.Array<kha.TimeTask>(new kha.TimeTask[]{});
		//line 85 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.frameTasks = new haxe.root.Array<kha.FrameTask>(new kha.FrameTask[]{});
		//line 86 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.toDeleteFrame = new haxe.root.Array<kha.FrameTask>(new kha.FrameTask[]{});
	}
	
	
	public static void start(java.lang.Object restartTimers)
	{
		//line 89 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		boolean __temp_restartTimers7 = ( (haxe.lang.Runtime.eq(restartTimers, null)) ? (false) : (haxe.lang.Runtime.toBool(restartTimers)) );
		//line 90 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.vsync = kha.System.get_vsync();
		//line 91 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		int hz = kha.System.get_refreshRate();
		//line 92 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		if (( ( hz >= 57 ) && ( hz <= 63 ) )) 
		{
			//line 92 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			hz = 60;
		}
		
		//line 93 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.onedifhz = ( 1.0 / hz );
		//line 95 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.stopped = false;
		//line 96 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.resetTime();
		//line 97 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.lastTime = ( kha.Scheduler.realTime() - kha.Scheduler.startTime );
		//line 98 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		{
			//line 98 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g1 = 0;
			//line 98 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g = kha.Scheduler.DIF_COUNT;
			//line 98 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			while (( _g1 < _g ))
			{
				//line 98 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				int i = _g1++;
				//line 98 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.Scheduler.deltas.__set(i, 0);
			}
			
		}
		
		//line 100 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		if (__temp_restartTimers7) 
		{
			//line 101 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			{
				//line 101 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				int _g2 = 0;
				//line 101 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				haxe.root.Array<kha.TimeTask> _g11 = kha.Scheduler.timeTasks;
				//line 101 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				while (( _g2 < _g11.length ))
				{
					//line 101 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					kha.TimeTask timeTask = _g11.__get(_g2);
					//line 101 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					 ++ _g2;
					//line 102 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					timeTask.paused = false;
				}
				
			}
			
			//line 105 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			{
				//line 105 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				int _g3 = 0;
				//line 105 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				haxe.root.Array<kha.FrameTask> _g12 = kha.Scheduler.frameTasks;
				//line 105 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				while (( _g3 < _g12.length ))
				{
					//line 105 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					kha.FrameTask frameTask = _g12.__get(_g3);
					//line 105 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					 ++ _g3;
					//line 106 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					frameTask.paused = false;
				}
				
			}
			
		}
		
	}
	
	
	public static void stop()
	{
		//line 112 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.stopped = true;
	}
	
	
	public static boolean isStopped()
	{
		//line 116 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		return kha.Scheduler.stopped;
	}
	
	
	public static void warpTimeTasks(double time, haxe.root.Array<kha.TimeTask> tasks)
	{
		//line 120 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		int _g = 0;
		//line 120 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		while (( _g < tasks.length ))
		{
			//line 120 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			kha.TimeTask timeTask = tasks.__get(_g);
			//line 120 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			 ++ _g;
			//line 121 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			if (( timeTask.start >= time )) 
			{
				//line 122 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				timeTask.next = timeTask.start;
			}
			else
			{
				//line 124 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				if (( timeTask.period > 0 )) 
				{
					//line 125 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					double sinceStart = ( time - timeTask.start );
					//line 126 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					int times = ((int) (java.lang.Math.ceil(( sinceStart / timeTask.period ))) );
					//line 127 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					timeTask.next = ( timeTask.start + ( times * timeTask.period ) );
				}
				
			}
			
		}
		
	}
	
	
	public static void back(double time)
	{
		//line 133 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		if (( time >= kha.Scheduler.lastTime )) 
		{
			//line 133 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			return ;
		}
		
		//line 135 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.current = time;
		//line 136 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.lastTime = time;
		//line 137 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.warpTimeTasks(time, kha.Scheduler.outdatedTimeTasks);
		//line 138 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.warpTimeTasks(time, kha.Scheduler.timeTasks);
		//line 140 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		{
			//line 140 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g = 0;
			//line 140 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			haxe.root.Array<kha.TimeTask> _g1 = kha.Scheduler.outdatedTimeTasks;
			//line 140 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			while (( _g < _g1.length ))
			{
				//line 140 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.TimeTask task = _g1.__get(_g);
				//line 140 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				 ++ _g;
				//line 141 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				if (( task.next >= time )) 
				{
					//line 142 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					kha.Scheduler.timeTasksScratchpad.push(task);
				}
				
			}
			
		}
		
		//line 145 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		{
			//line 145 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g2 = 0;
			//line 145 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			haxe.root.Array<kha.TimeTask> _g11 = kha.Scheduler.timeTasksScratchpad;
			//line 145 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			while (( _g2 < _g11.length ))
			{
				//line 145 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.TimeTask task1 = _g11.__get(_g2);
				//line 145 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				 ++ _g2;
				//line 146 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.Scheduler.outdatedTimeTasks.remove(task1);
			}
			
		}
		
		//line 148 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		{
			//line 148 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g3 = 0;
			//line 148 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			haxe.root.Array<kha.TimeTask> _g12 = kha.Scheduler.timeTasksScratchpad;
			//line 148 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			while (( _g3 < _g12.length ))
			{
				//line 148 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.TimeTask task2 = _g12.__get(_g3);
				//line 148 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				 ++ _g3;
				//line 149 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.Scheduler.insertSorted(kha.Scheduler.timeTasks, task2);
			}
			
		}
		
		//line 151 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		while (( kha.Scheduler.timeTasksScratchpad.length > 0 ))
		{
			//line 152 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			kha.Scheduler.timeTasksScratchpad.remove(kha.Scheduler.timeTasksScratchpad.__get(0));
		}
		
		//line 155 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		{
			//line 155 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g4 = 0;
			//line 155 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			haxe.root.Array<kha.TimeTask> _g13 = kha.Scheduler.outdatedTimeTasks;
			//line 155 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			while (( _g4 < _g13.length ))
			{
				//line 155 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.TimeTask task3 = _g13.__get(_g4);
				//line 155 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				 ++ _g4;
				//line 156 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				if (( task3.next < ( time - 1.0 ) )) 
				{
					//line 157 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					kha.Scheduler.timeTasksScratchpad.push(task3);
				}
				
			}
			
		}
		
		//line 160 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		{
			//line 160 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g5 = 0;
			//line 160 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			haxe.root.Array<kha.TimeTask> _g14 = kha.Scheduler.timeTasksScratchpad;
			//line 160 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			while (( _g5 < _g14.length ))
			{
				//line 160 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.TimeTask task4 = _g14.__get(_g5);
				//line 160 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				 ++ _g5;
				//line 161 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.Scheduler.outdatedTimeTasks.remove(task4);
			}
			
		}
		
		//line 163 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		while (( kha.Scheduler.timeTasksScratchpad.length > 0 ))
		{
			//line 164 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			kha.Scheduler.timeTasksScratchpad.remove(kha.Scheduler.timeTasksScratchpad.__get(0));
		}
		
	}
	
	
	public static void executeFrame()
	{
		//line 169 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		double now = ( kha.Scheduler.realTime() - kha.Scheduler.startTime );
		//line 170 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		double delta = ( now - kha.Scheduler.lastTime );
		//line 172 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		double frameEnd = kha.Scheduler.current;
		//line 174 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		if (( delta < 0 )) 
		{
			//line 175 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			return ;
		}
		
		//line 180 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		if (( delta > kha.Scheduler.maxframetime )) 
		{
			//line 181 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			kha.Scheduler.startTime += ( delta - kha.Scheduler.maxframetime );
			//line 182 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			delta = kha.Scheduler.maxframetime;
			//line 183 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			frameEnd += delta;
		}
		else
		{
			//line 186 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			if (kha.Scheduler.vsync) 
			{
				//line 189 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				double realdif = kha.Scheduler.onedifhz;
				//line 190 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				while (( realdif < ( delta - kha.Scheduler.onedifhz ) ))
				{
					//line 191 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					realdif += kha.Scheduler.onedifhz;
				}
				
				//line 194 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				delta = realdif;
				//line 195 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				{
					//line 195 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					int _g1 = 0;
					//line 195 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					int _g = ( kha.Scheduler.DIF_COUNT - 2 );
					//line 195 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					while (( _g1 < _g ))
					{
						//line 195 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
						int i = _g1++;
						//line 196 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
						delta += ((double) (haxe.lang.Runtime.toDouble(kha.Scheduler.deltas.__get(i))) );
						//line 197 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
						kha.Scheduler.deltas.__set(i, ((double) (haxe.lang.Runtime.toDouble(kha.Scheduler.deltas.__get(( i + 1 )))) ));
					}
					
				}
				
				//line 199 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				delta += ((double) (haxe.lang.Runtime.toDouble(kha.Scheduler.deltas.__get(( kha.Scheduler.DIF_COUNT - 2 )))) );
				//line 200 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				delta /= ((double) (kha.Scheduler.DIF_COUNT) );
				//line 201 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.Scheduler.deltas.__set(( kha.Scheduler.DIF_COUNT - 2 ), realdif);
				//line 203 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				frameEnd += delta;
			}
			else
			{
				//line 206 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				{
					//line 206 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					int _g11 = 0;
					//line 206 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					int _g2 = ( kha.Scheduler.DIF_COUNT - 1 );
					//line 206 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					while (( _g11 < _g2 ))
					{
						//line 206 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
						int i1 = _g11++;
						//line 207 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
						kha.Scheduler.deltas.__set(i1, ((double) (haxe.lang.Runtime.toDouble(kha.Scheduler.deltas.__get(( i1 + 1 )))) ));
					}
					
				}
				
				//line 209 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.Scheduler.deltas.__set(( kha.Scheduler.DIF_COUNT - 1 ), delta);
				//line 211 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				double next = ((double) (0) );
				//line 212 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				{
					//line 212 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					int _g12 = 0;
					//line 212 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					int _g3 = kha.Scheduler.DIF_COUNT;
					//line 212 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					while (( _g12 < _g3 ))
					{
						//line 212 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
						int i2 = _g12++;
						//line 213 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
						next += ((double) (haxe.lang.Runtime.toDouble(kha.Scheduler.deltas.__get(i2))) );
					}
					
				}
				
				//line 215 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				next /= ((double) (kha.Scheduler.DIF_COUNT) );
				//line 220 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				frameEnd += next;
			}
			
		}
		
		//line 224 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.lastTime = frameEnd;
		//line 225 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		if ( ! (kha.Scheduler.stopped) ) 
		{
			//line 226 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			kha.Scheduler.current = frameEnd;
		}
		
		//line 230 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		{
			//line 230 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g4 = 0;
			//line 230 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			haxe.root.Array<kha.TimeTask> _g13 = kha.Scheduler.pausedTimeTasks;
			//line 230 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			while (( _g4 < _g13.length ))
			{
				//line 230 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.TimeTask pausedTask = _g13.__get(_g4);
				//line 230 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				 ++ _g4;
				//line 231 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				pausedTask.next += delta;
			}
			
		}
		
		//line 234 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		if (kha.Scheduler.stopped) 
		{
			//line 236 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g5 = 0;
			//line 236 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			haxe.root.Array<kha.TimeTask> _g14 = kha.Scheduler.timeTasks;
			//line 236 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			while (( _g5 < _g14.length ))
			{
				//line 236 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.TimeTask timeTask = _g14.__get(_g5);
				//line 236 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				 ++ _g5;
				//line 237 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				timeTask.next += delta;
			}
			
		}
		
		//line 241 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		while (( kha.Scheduler.timeTasks.length > 0 ))
		{
			//line 242 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			kha.Scheduler.activeTimeTask = kha.Scheduler.timeTasks.__get(0);
			//line 244 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			if (( kha.Scheduler.activeTimeTask.next <= frameEnd )) 
			{
				//line 245 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.Scheduler.activeTimeTask.next += kha.Scheduler.activeTimeTask.period;
				//line 246 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.Scheduler.timeTasks.remove(kha.Scheduler.activeTimeTask);
				//line 248 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				if (( kha.Scheduler.activeTimeTask.active && haxe.lang.Runtime.toBool(kha.Scheduler.activeTimeTask.task.__hx_invoke0_o()) )) 
				{
					//line 249 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					if (( ( kha.Scheduler.activeTimeTask.period > 0 ) && (( ( kha.Scheduler.activeTimeTask.duration == 0 ) || ( kha.Scheduler.activeTimeTask.duration >= ( kha.Scheduler.activeTimeTask.start + kha.Scheduler.activeTimeTask.next ) ) )) )) 
					{
						//line 250 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
						kha.Scheduler.insertSorted(kha.Scheduler.timeTasks, kha.Scheduler.activeTimeTask);
					}
					else
					{
						//line 253 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
						kha.Scheduler.archiveTimeTask(kha.Scheduler.activeTimeTask, frameEnd);
					}
					
				}
				else
				{
					//line 257 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					kha.Scheduler.activeTimeTask.active = false;
					//line 258 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					kha.Scheduler.archiveTimeTask(kha.Scheduler.activeTimeTask, frameEnd);
				}
				
			}
			else
			{
				//line 262 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				break;
			}
			
		}
		
		//line 265 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.activeTimeTask = null;
		//line 267 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.sortFrameTasks();
		//line 268 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		{
			//line 268 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g6 = 0;
			//line 268 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			haxe.root.Array<kha.FrameTask> _g15 = kha.Scheduler.frameTasks;
			//line 268 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			while (( _g6 < _g15.length ))
			{
				//line 268 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.FrameTask frameTask = _g15.__get(_g6);
				//line 268 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				 ++ _g6;
				//line 269 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				if (( (  ! (kha.Scheduler.stopped)  &&  ! (frameTask.paused)  ) && frameTask.active )) 
				{
					//line 270 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					if ( ! (haxe.lang.Runtime.toBool(frameTask.task.__hx_invoke0_o())) ) 
					{
						//line 270 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
						frameTask.active = false;
					}
					
				}
				
			}
			
		}
		
		//line 274 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		{
			//line 274 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g7 = 0;
			//line 274 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			haxe.root.Array<kha.FrameTask> _g16 = kha.Scheduler.frameTasks;
			//line 274 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			while (( _g7 < _g16.length ))
			{
				//line 274 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.FrameTask frameTask1 = _g16.__get(_g7);
				//line 274 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				 ++ _g7;
				//line 275 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				if ( ! (frameTask1.active) ) 
				{
					//line 276 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					kha.Scheduler.toDeleteFrame.push(frameTask1);
				}
				
			}
			
		}
		
		//line 280 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		while (( kha.Scheduler.toDeleteFrame.length > 0 ))
		{
			//line 281 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			kha.Scheduler.frameTasks.remove(((kha.FrameTask) (kha.Scheduler.toDeleteFrame.pop()) ));
		}
		
	}
	
	
	public static void archiveTimeTask(kha.TimeTask timeTask, double frameEnd)
	{
	}
	
	
	public static double time()
	{
		//line 298 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		return kha.Scheduler.current;
	}
	
	
	public static double realTime()
	{
		//line 305 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		return kha.System.get_time();
	}
	
	
	public static void resetTime()
	{
		//line 309 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		double now = kha.System.get_time();
		//line 310 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		double dif = ( now - kha.Scheduler.startTime );
		//line 311 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.startTime = now;
		//line 312 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		{
			//line 312 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g = 0;
			//line 312 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			haxe.root.Array<kha.TimeTask> _g1 = kha.Scheduler.timeTasks;
			//line 312 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			while (( _g < _g1.length ))
			{
				//line 312 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.TimeTask timeTask = _g1.__get(_g);
				//line 312 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				 ++ _g;
				//line 313 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				timeTask.start -= dif;
				//line 314 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				timeTask.next -= dif;
			}
			
		}
		
		//line 316 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		{
			//line 316 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g11 = 0;
			//line 316 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g2 = kha.Scheduler.DIF_COUNT;
			//line 316 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			while (( _g11 < _g2 ))
			{
				//line 316 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				int i = _g11++;
				//line 316 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.Scheduler.deltas.__set(i, 0);
			}
			
		}
		
		//line 317 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.current = ((double) (0) );
		//line 318 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.lastTime = ((double) (0) );
	}
	
	
	public static int addBreakableFrameTask(haxe.lang.Function task, int priority)
	{
		//line 322 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.frameTasks.push(new kha.FrameTask(task, priority,  ++ kha.Scheduler.currentFrameTaskId));
		//line 323 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.frame_tasks_sorted = false;
		//line 324 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		return kha.Scheduler.currentFrameTaskId;
	}
	
	
	public static int addFrameTask(haxe.lang.Function task, int priority)
	{
		//line 328 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		return kha.Scheduler.addBreakableFrameTask(new kha.Scheduler_addFrameTask_328__Fun(task), priority);
	}
	
	
	public static void pauseFrameTask(int id, boolean paused)
	{
		//line 335 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		int _g = 0;
		//line 335 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		haxe.root.Array<kha.FrameTask> _g1 = kha.Scheduler.frameTasks;
		//line 335 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		while (( _g < _g1.length ))
		{
			//line 335 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			kha.FrameTask frameTask = _g1.__get(_g);
			//line 335 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			 ++ _g;
			//line 336 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			if (( frameTask.id == id )) 
			{
				//line 337 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				frameTask.paused = paused;
				//line 338 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				break;
			}
			
		}
		
	}
	
	
	public static void removeFrameTask(int id)
	{
		//line 344 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		int _g = 0;
		//line 344 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		haxe.root.Array<kha.FrameTask> _g1 = kha.Scheduler.frameTasks;
		//line 344 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		while (( _g < _g1.length ))
		{
			//line 344 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			kha.FrameTask frameTask = _g1.__get(_g);
			//line 344 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			 ++ _g;
			//line 345 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			if (( frameTask.id == id )) 
			{
				//line 346 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				frameTask.active = false;
				//line 347 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				break;
			}
			
		}
		
	}
	
	
	public static int generateGroupId()
	{
		//line 353 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		return  ++ kha.Scheduler.currentGroupId;
	}
	
	
	public static int addBreakableTimeTaskToGroup(int groupId, haxe.lang.Function task, double start, java.lang.Object period, java.lang.Object duration)
	{
		//line 356 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		double __temp_duration9 = ( (haxe.lang.Runtime.eq(duration, null)) ? (((double) (0) )) : (((double) (haxe.lang.Runtime.toDouble(duration)) )) );
		//line 356 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		double __temp_period8 = ( (haxe.lang.Runtime.eq(period, null)) ? (((double) (0) )) : (((double) (haxe.lang.Runtime.toDouble(period)) )) );
		//line 357 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.TimeTask t = new kha.TimeTask();
		//line 358 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		t.active = true;
		//line 359 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		t.task = task;
		//line 360 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		t.id =  ++ kha.Scheduler.currentTimeTaskId;
		//line 361 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		t.groupId = groupId;
		//line 363 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		t.start = ( kha.Scheduler.current + start );
		//line 364 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		t.period = ((double) (0) );
		//line 365 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		if (( __temp_period8 != 0 )) 
		{
			//line 365 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			t.period = __temp_period8;
		}
		
		//line 366 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		t.duration = ((double) (0) );
		//line 367 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		if (( __temp_duration9 != 0 )) 
		{
			//line 367 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			t.duration = ( t.start + __temp_duration9 );
		}
		
		//line 369 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		t.next = t.start;
		//line 370 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.insertSorted(kha.Scheduler.timeTasks, t);
		//line 371 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		return t.id;
	}
	
	
	public static int addTimeTaskToGroup(int groupId, haxe.lang.Function task, double start, java.lang.Object period, java.lang.Object duration)
	{
		//line 375 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		double __temp_duration11 = ( (haxe.lang.Runtime.eq(duration, null)) ? (((double) (0) )) : (((double) (haxe.lang.Runtime.toDouble(duration)) )) );
		//line 375 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		double __temp_period10 = ( (haxe.lang.Runtime.eq(period, null)) ? (((double) (0) )) : (((double) (haxe.lang.Runtime.toDouble(period)) )) );
		//line 375 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		return kha.Scheduler.addBreakableTimeTaskToGroup(groupId, new kha.Scheduler_addTimeTaskToGroup_375__Fun(task), start, __temp_period10, __temp_duration11);
	}
	
	
	public static int addBreakableTimeTask(haxe.lang.Function task, double start, java.lang.Object period, java.lang.Object duration)
	{
		//line 382 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		double __temp_duration13 = ( (haxe.lang.Runtime.eq(duration, null)) ? (((double) (0) )) : (((double) (haxe.lang.Runtime.toDouble(duration)) )) );
		//line 382 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		double __temp_period12 = ( (haxe.lang.Runtime.eq(period, null)) ? (((double) (0) )) : (((double) (haxe.lang.Runtime.toDouble(period)) )) );
		//line 382 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		return kha.Scheduler.addBreakableTimeTaskToGroup(0, task, start, __temp_period12, __temp_duration13);
	}
	
	
	public static int addTimeTask(haxe.lang.Function task, double start, java.lang.Object period, java.lang.Object duration)
	{
		//line 386 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		double __temp_duration15 = ( (haxe.lang.Runtime.eq(duration, null)) ? (((double) (0) )) : (((double) (haxe.lang.Runtime.toDouble(duration)) )) );
		//line 386 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		double __temp_period14 = ( (haxe.lang.Runtime.eq(period, null)) ? (((double) (0) )) : (((double) (haxe.lang.Runtime.toDouble(period)) )) );
		//line 386 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		return kha.Scheduler.addTimeTaskToGroup(0, task, start, __temp_period14, __temp_duration15);
	}
	
	
	public static kha.TimeTask getTimeTask(int id)
	{
		//line 390 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		if (( ( kha.Scheduler.activeTimeTask != null ) && ( kha.Scheduler.activeTimeTask.id == id ) )) 
		{
			//line 390 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			return kha.Scheduler.activeTimeTask;
		}
		
		//line 391 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		{
			//line 391 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g = 0;
			//line 391 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			haxe.root.Array<kha.TimeTask> _g1 = kha.Scheduler.timeTasks;
			//line 391 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			while (( _g < _g1.length ))
			{
				//line 391 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.TimeTask timeTask = _g1.__get(_g);
				//line 391 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				 ++ _g;
				//line 392 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				if (( timeTask.id == id )) 
				{
					//line 393 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					return timeTask;
				}
				
			}
			
		}
		
		//line 396 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		{
			//line 396 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g2 = 0;
			//line 396 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			haxe.root.Array<kha.TimeTask> _g11 = kha.Scheduler.pausedTimeTasks;
			//line 396 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			while (( _g2 < _g11.length ))
			{
				//line 396 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.TimeTask timeTask1 = _g11.__get(_g2);
				//line 396 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				 ++ _g2;
				//line 397 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				if (( timeTask1.id == id )) 
				{
					//line 398 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					return timeTask1;
				}
				
			}
			
		}
		
		//line 401 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		return null;
	}
	
	
	public static void pauseTimeTask(int id, boolean paused)
	{
		//line 405 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.TimeTask timeTask = kha.Scheduler.getTimeTask(id);
		//line 406 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		if (( timeTask != null )) 
		{
			//line 407 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			kha.Scheduler.pauseRunningTimeTask(timeTask, paused);
		}
		
		//line 409 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		if (( ( kha.Scheduler.activeTimeTask != null ) && ( kha.Scheduler.activeTimeTask.id == id ) )) 
		{
			//line 410 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			kha.Scheduler.activeTimeTask.paused = paused;
		}
		
	}
	
	
	public static void pauseRunningTimeTask(kha.TimeTask timeTask, boolean paused)
	{
		//line 415 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		timeTask.paused = paused;
		//line 416 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		if (paused) 
		{
			//line 417 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			kha.Scheduler.timeTasks.remove(timeTask);
			//line 418 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			kha.Scheduler.pausedTimeTasks.push(timeTask);
		}
		else
		{
			//line 421 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			kha.Scheduler.insertSorted(kha.Scheduler.timeTasks, timeTask);
			//line 422 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			kha.Scheduler.pausedTimeTasks.remove(timeTask);
		}
		
	}
	
	
	public static void pauseTimeTasks(int groupId, boolean paused)
	{
		//line 427 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		{
			//line 427 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g = 0;
			//line 427 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			haxe.root.Array<kha.TimeTask> _g1 = kha.Scheduler.timeTasks;
			//line 427 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			while (( _g < _g1.length ))
			{
				//line 427 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.TimeTask timeTask = _g1.__get(_g);
				//line 427 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				 ++ _g;
				//line 428 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				if (( timeTask.groupId == groupId )) 
				{
					//line 429 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					kha.Scheduler.pauseRunningTimeTask(timeTask, paused);
				}
				
			}
			
		}
		
		//line 432 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		if (( ( kha.Scheduler.activeTimeTask != null ) && ( kha.Scheduler.activeTimeTask.groupId == groupId ) )) 
		{
			//line 433 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			kha.Scheduler.activeTimeTask.paused = paused;
		}
		
	}
	
	
	public static void removeTimeTask(int id)
	{
		//line 438 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.TimeTask timeTask = kha.Scheduler.getTimeTask(id);
		//line 439 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		if (( timeTask != null )) 
		{
			//line 440 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			timeTask.active = false;
			//line 441 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			kha.Scheduler.timeTasks.remove(timeTask);
		}
		
	}
	
	
	public static void removeTimeTasks(int groupId)
	{
		//line 446 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		{
			//line 446 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g = 0;
			//line 446 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			haxe.root.Array<kha.TimeTask> _g1 = kha.Scheduler.timeTasks;
			//line 446 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			while (( _g < _g1.length ))
			{
				//line 446 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.TimeTask timeTask = _g1.__get(_g);
				//line 446 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				 ++ _g;
				//line 447 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				if (( timeTask.groupId == groupId )) 
				{
					//line 448 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					timeTask.active = false;
					//line 449 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					kha.Scheduler.timeTasksScratchpad.push(timeTask);
				}
				
			}
			
		}
		
		//line 453 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		{
			//line 453 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g2 = 0;
			//line 453 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			haxe.root.Array<kha.TimeTask> _g11 = kha.Scheduler.timeTasksScratchpad;
			//line 453 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			while (( _g2 < _g11.length ))
			{
				//line 453 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.TimeTask timeTask1 = _g11.__get(_g2);
				//line 453 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				 ++ _g2;
				//line 454 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				kha.Scheduler.timeTasks.remove(timeTask1);
			}
			
		}
		
		//line 456 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		while (( kha.Scheduler.timeTasksScratchpad.length > 0 ))
		{
			//line 457 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			kha.Scheduler.timeTasksScratchpad.remove(kha.Scheduler.timeTasksScratchpad.__get(0));
		}
		
		//line 460 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		if (( ( kha.Scheduler.activeTimeTask != null ) && ( kha.Scheduler.activeTimeTask.groupId == groupId ) )) 
		{
			//line 461 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			kha.Scheduler.activeTimeTask.active = false;
		}
		
	}
	
	
	public static int numTasksInSchedule()
	{
		//line 466 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		return ( kha.Scheduler.timeTasks.length + kha.Scheduler.frameTasks.length );
	}
	
	
	public static void insertSorted(haxe.root.Array<kha.TimeTask> list, kha.TimeTask task)
	{
		//line 470 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		{
			//line 470 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g1 = 0;
			//line 470 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			int _g = list.length;
			//line 470 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			while (( _g1 < _g ))
			{
				//line 470 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				int i = _g1++;
				//line 471 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
				if (( list.__get(i).next > task.next )) 
				{
					//line 472 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					list.insert(i, task);
					//line 473 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
					return ;
				}
				
			}
			
		}
		
		//line 476 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		list.push(task);
	}
	
	
	public static void sortFrameTasks()
	{
		//line 480 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		if (kha.Scheduler.frame_tasks_sorted) 
		{
			//line 480 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
			return ;
		}
		
		//line 481 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.frameTasks.sort(( (( kha.Scheduler_sortFrameTasks_481__Fun.__hx_current != null )) ? (kha.Scheduler_sortFrameTasks_481__Fun.__hx_current) : (kha.Scheduler_sortFrameTasks_481__Fun.__hx_current = ((kha.Scheduler_sortFrameTasks_481__Fun) (new kha.Scheduler_sortFrameTasks_481__Fun()) )) ));
		//line 484 "/Applications/Kode Studio.app/Contents/Resources/app/extensions/kha/Kha/Sources/kha/Scheduler.hx"
		kha.Scheduler.frame_tasks_sorted = true;
	}
	
	
}


